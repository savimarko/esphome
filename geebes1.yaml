# Example ESPHome code to emulate stock firmware functionality while maintaining 100% 
# local control through Home Assistant.

substitutions:
  device_name: 'geebes1'     # used internally.. e.g. teckin_sp20
  friendly_name: 'Kahvinkeitin'   # displayed in HA.. e.g. Teckin SP20

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret iot_ssid
  password: !secret iot_ssid_passwd

# Enable Logs from the device
logger:

# Enable Home Assistant API
api:

# Enable Over-The-Air updates
ota:

sensor:
  # Power measuring sensor
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO5
    cf1_pin: GPIO14
    current:
      name: Current
      id: curr
      internal: true
    power:
      name: Power
      id: power
      internal: true
      filters:
        # Some calibration
        - multiply: 0.4545
    voltage:
      name: Voltage
      id: volt
      internal: true
    current_resistor: 0.001  # default 0.001
    voltage_divider: 910     # default 2351
    change_mode_every: 8     # default 8
    update_interval: 2s      # default 60s

  # Sum power readings over the day
  - platform: total_daily_energy
    id: daily_energy
    internal: true
    power_id: power
    filters:
      - multiply: 0.001   # convert Wh to kWh
    unit_of_measurement: kWh
    
################################################################################
#                         Slow sensors for Home assistant                      #
################################################################################

  - platform: template #########################
    name: ${friendly_name} Current
    lambda: |-
      if (id(curr).state) {
        return (id(curr).state);
      } else {
        return 0;
      }
    unit_of_measurement: A
    icon: "mdi:alpha-a-circle"
    update_interval: 60s
  
  - platform: template #########################
    name: ${friendly_name} Voltage
    lambda: |-
      if (id(volt).state) {
        return (id(volt).state);
      } else {
        return 0;
      }
    unit_of_measurement: V
    icon: "mdi:alpha-v-circle"
    update_interval: 60s
  
  - platform: template #########################
    name: ${friendly_name} Power
    lambda: |-
      if (id(power).state) {
        return (id(power).state);
      } else {
        return 0;
      }
    unit_of_measurement: W 
    icon: "mdi:alpha-w-circle"
    update_interval: 60s    
    
  - platform: template #########################
    name: ${friendly_name} Total Daily Energy
    lambda: |-
      if (id(daily_energy).state) {
        return (id(daily_energy).state);
      } else {
        return 0;
      }
    unit_of_measurement: kWh 
    icon: "mdi:flash"
    update_interval: 60s    

# Enable getting local time for total daily energy calculation
time:
  - platform: homeassistant
    id: homeassistant_time

status_led:
  pin:
    number: GPIO0   # Red LED
    inverted: True

binary_sensor:
  - platform: gpio
    pin: GPIO13
    id: button
    name: ${friendly_name} Button
    on_press:
      - switch.toggle: relay
    internal: True
#######################
# tilakoneen tilat    #
#######################
  - platform: template
    name: ${friendly_name} päällä
    id: coffee_machine_on
    filters:
        - delayed_off: 1s
    lambda: |-
      if (isnan(id(power).state)) 
      {
        return {};
      }
      else if (id(power).state > 5) 
      {
      return true;
      }
      else 
      {
        return false;
      }
    on_press:
      then: # at cycle start i reset all binary sensors
        - lambda: |-  
            {
              id(coffee_machine_brewing).publish_state(false);
              id(coffee_machine_keeping_warm).publish_state(false);
              id(coffee_machine_off).publish_state(false);
            }
        #- light.turn_on: led
    on_release:
      then: # at the end of cycle turn on end cycle
        - switch.turn_off: relay
        - lambda: |-  
            {
              id(coffee_machine_off).publish_state(true);
            }

  - platform: template
    name: ${friendly_name} keittää
    id: coffee_machine_brewing
    filters:
      delayed_off: 30s
    lambda: |-
      if (isnan(id(power).state)) 
      {
        return {};
      } 
      else if (id(power).state >= 200) 
      {
        return true;
      }
      else 
      {
        return false;
      }
  - platform: template
    name: ${friendly_name} pitää lämpimänä
    id: coffee_machine_keeping_warm
    lambda: |-  
      if (isnan(id(power).state)) 
      {
        return {};
      } 
      else if ( (id(power).state > 5)&&(id(power).state < 200) )
      {
        return true;
      }
      else
      {
        return false;
      }
    on_press:
      then:
        - delay: '01:00'
        - switch.turn_off: relay
        
  - platform: template
    name: ${friendly_name} pois päältä
    id: coffee_machine_off


switch:
  - platform: gpio
    id: blue_led
    pin:
      number: GPIO2
      inverted: True
    
  - platform: gpio
    pin: GPIO15
    id: relay
    name: ${friendly_name}
    # Tie Blue LED to relay
    on_turn_on:
    - switch.turn_on: blue_led
    on_turn_off:
    - switch.turn_off: blue_led
    
    
