esphome:
  name: rf_bridge
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret iot_ssid
  password: !secret iot_ssid_passwd

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rf Bridge Fallback Hotspot"
    password: "ABpMBgumhC7j"

captive_portal:


ota:

# Enable Home Assistant API
api:
  services:
    - service: send_rf_code
      variables:
        sync: int
        low: int
        high: int
        code: int
      then:
        - rf_bridge.send_code:
            sync: !lambda 'return sync;'
            low: !lambda 'return low;'
            high: !lambda 'return high;'
            code: !lambda 'return code;'
    - service: learn
      then:
        - rf_bridge.learn

uart:
  tx_pin: 1
  rx_pin: 3
  baud_rate: 19200

logger:
  baud_rate: 0

binary_sensor:
  - platform: template
    name: "Etuovi"
    device_class: door
    id: bin_etuovi
  - platform: template
    name: "Sivuovi"
    device_class: door
    id: bin_sivuovi
  - platform: template
    name: "Etuterassi"
    device_class: motion
    id: bin_etuterassi
    on_press:
      then:
        - delay: 10s
        - binary_sensor.template.publish:
            id: bin_etuterassi
            state: OFF
  - platform: template
    name: "Sivuterassi"
    device_class: motion
    id: bin_sivuterassi
    on_press:
      then:
        - delay: 10s
        - binary_sensor.template.publish:
            id: bin_sivuterassi
            state: OFF
    
rf_bridge:
  on_code_received:
    then:
      - homeassistant.event:
          event: esphome.rf_code_received
          data:
            sync: !lambda 'char buffer [10];return itoa(data.sync,buffer,16);'
            low: !lambda 'char buffer [10];return itoa(data.low,buffer,16);'
            high: !lambda 'char buffer [10];return itoa(data.high,buffer,16);'
            code: !lambda 'char buffer [10];return itoa(data.code,buffer,16);'
      - lambda: |-
          switch (data.code) 
          {
            case 0x33A20A:
              id(bin_etuovi).publish_state(true);
              break;
              
            case 0x33A20E:
              id(bin_etuovi).publish_state(false);
              break;
              
            case 0x34210A:
              id(bin_sivuovi).publish_state(true);
              break;
              
            case 0x34210E:
              id(bin_sivuovi).publish_state(false);
              break;
              
            case 0xee88ae:
              id(bin_etuterassi).publish_state(true);
              break;

            case 0xeee44e:
              id(bin_sivuterassi).publish_state(true);
              break;

          }

